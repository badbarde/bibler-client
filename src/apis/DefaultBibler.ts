/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Book,
    BookFromJSON,
    BookToJSON,
    BorrowResponseModel,
    BorrowResponseModelFromJSON,
    BorrowResponseModelToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PutBookResponseModel,
    PutBookResponseModelFromJSON,
    PutBookResponseModelToJSON,
    PutUserResponseModel,
    PutUserResponseModelFromJSON,
    PutUserResponseModelToJSON,
    ReturningResponseModel,
    ReturningResponseModelFromJSON,
    ReturningResponseModelToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface BorrowBookBorrowUserKeyBookKeyPatchRequest {
    userKey: number;
    bookKey: number;
    duration?: number;
}

export interface CreateFileFilesPostRequest {
    file: Blob;
}

export interface CreateFileMediaBookKeyGetRequest {
    bookKey: number;
}

export interface GetBooksBooksGetRequest {
    userKey?: number;
}

export interface ImportCsvImportCsvPostRequest {
    file: Blob;
}

export interface PutBookBookPutRequest {
    book: Book;
}

export interface PutUserUserPutRequest {
    user: User;
}

export interface ReturnBookReturnUserKeyBookKeyPatchRequest {
    userKey: number;
    bookKey: number;
}

/**
 * no description
 */
export class DefaultBibler extends runtime.BaseAPI {

    /**
     * borrow a book with the key `book_key` to the user with the key `user_key`
     * Borrow Book
     */
    async borrowBookBorrowUserKeyBookKeyPatchRaw(requestParameters: BorrowBookBorrowUserKeyBookKeyPatchRequest): Promise<runtime.ApiResponse<BorrowResponseModel>> {
        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
            throw new runtime.RequiredError('userKey','Required parameter requestParameters.userKey was null or undefined when calling borrowBookBorrowUserKeyBookKeyPatch.');
        }

        if (requestParameters.bookKey === null || requestParameters.bookKey === undefined) {
            throw new runtime.RequiredError('bookKey','Required parameter requestParameters.bookKey was null or undefined when calling borrowBookBorrowUserKeyBookKeyPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/borrow/{user_key}/{book_key}`.replace(`{${"user_key"}}`, encodeURIComponent(String(requestParameters.userKey))).replace(`{${"book_key"}}`, encodeURIComponent(String(requestParameters.bookKey))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BorrowResponseModelFromJSON(jsonValue));
    }

    /**
     * borrow a book with the key `book_key` to the user with the key `user_key`
     * Borrow Book
     */
    async borrowBookBorrowUserKeyBookKeyPatch(requestParameters: BorrowBookBorrowUserKeyBookKeyPatchRequest): Promise<BorrowResponseModel> {
        const response = await this.borrowBookBorrowUserKeyBookKeyPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create File
     */
    async createFileFilesPostRaw(requestParameters: CreateFileFilesPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createFileFilesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create File
     */
    async createFileFilesPost(requestParameters: CreateFileFilesPostRequest): Promise<object> {
        const response = await this.createFileFilesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create File
     */
    async createFileMediaBookKeyGetRaw(requestParameters: CreateFileMediaBookKeyGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bookKey === null || requestParameters.bookKey === undefined) {
            throw new runtime.RequiredError('bookKey','Required parameter requestParameters.bookKey was null or undefined when calling createFileMediaBookKeyGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media/{book_key}`.replace(`{${"book_key"}}`, encodeURIComponent(String(requestParameters.bookKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create File
     */
    async createFileMediaBookKeyGet(requestParameters: CreateFileMediaBookKeyGetRequest): Promise<object> {
        const response = await this.createFileMediaBookKeyGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get books
     * Get Books
     */
    async getBooksBooksGetRaw(requestParameters: GetBooksBooksGetRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userKey !== undefined) {
            queryParameters['user_key'] = requestParameters.userKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get books
     * Get Books
     */
    async getBooksBooksGet(requestParameters: GetBooksBooksGetRequest): Promise<object> {
        const response = await this.getBooksBooksGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * returns all users that are currenty borrowing a book and the books they are borrowing
     * Get Borrowing Users
     */
    async getBorrowingUsersBorrowUsersGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/borrow/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * returns all users that are currenty borrowing a book and the books they are borrowing
     * Get Borrowing Users
     */
    async getBorrowingUsersBorrowUsersGet(): Promise<object> {
        const response = await this.getBorrowingUsersBorrowUsersGetRaw();
        return await response.value();
    }

    /**
     * Get Stats
     */
    async getStatsStatsBooksBorrowedGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/books/borrowed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Stats
     */
    async getStatsStatsBooksBorrowedGet(): Promise<object> {
        const response = await this.getStatsStatsBooksBorrowedGetRaw();
        return await response.value();
    }

    /**
     * get users
     * Get Users
     */
    async getUsersUsersGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get users
     * Get Users
     */
    async getUsersUsersGet(): Promise<object> {
        const response = await this.getUsersUsersGetRaw();
        return await response.value();
    }

    /**
     * import `Book`s from csv file
     * Import Csv
     */
    async importCsvImportCsvPostRaw(requestParameters: ImportCsvImportCsvPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling importCsvImportCsvPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/import/csv/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * import `Book`s from csv file
     * Import Csv
     */
    async importCsvImportCsvPost(requestParameters: ImportCsvImportCsvPostRequest): Promise<object> {
        const response = await this.importCsvImportCsvPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Put Book
     */
    async putBookBookPutRaw(requestParameters: PutBookBookPutRequest): Promise<runtime.ApiResponse<PutBookResponseModel>> {
        if (requestParameters.book === null || requestParameters.book === undefined) {
            throw new runtime.RequiredError('book','Required parameter requestParameters.book was null or undefined when calling putBookBookPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/book`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PutBookResponseModelFromJSON(jsonValue));
    }

    /**
     * Put Book
     */
    async putBookBookPut(requestParameters: PutBookBookPutRequest): Promise<PutBookResponseModel> {
        const response = await this.putBookBookPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Put User
     */
    async putUserUserPutRaw(requestParameters: PutUserUserPutRequest): Promise<runtime.ApiResponse<PutUserResponseModel>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling putUserUserPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PutUserResponseModelFromJSON(jsonValue));
    }

    /**
     * Put User
     */
    async putUserUserPut(requestParameters: PutUserUserPutRequest): Promise<PutUserResponseModel> {
        const response = await this.putUserUserPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * return a book with the key `book_key` borrowed by the user with the key `user_key`
     * Return Book
     */
    async returnBookReturnUserKeyBookKeyPatchRaw(requestParameters: ReturnBookReturnUserKeyBookKeyPatchRequest): Promise<runtime.ApiResponse<ReturningResponseModel>> {
        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
            throw new runtime.RequiredError('userKey','Required parameter requestParameters.userKey was null or undefined when calling returnBookReturnUserKeyBookKeyPatch.');
        }

        if (requestParameters.bookKey === null || requestParameters.bookKey === undefined) {
            throw new runtime.RequiredError('bookKey','Required parameter requestParameters.bookKey was null or undefined when calling returnBookReturnUserKeyBookKeyPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/return/{user_key}/{book_key}`.replace(`{${"user_key"}}`, encodeURIComponent(String(requestParameters.userKey))).replace(`{${"book_key"}}`, encodeURIComponent(String(requestParameters.bookKey))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturningResponseModelFromJSON(jsonValue));
    }

    /**
     * return a book with the key `book_key` borrowed by the user with the key `user_key`
     * Return Book
     */
    async returnBookReturnUserKeyBookKeyPatch(requestParameters: ReturnBookReturnUserKeyBookKeyPatchRequest): Promise<ReturningResponseModel> {
        const response = await this.returnBookReturnUserKeyBookKeyPatchRaw(requestParameters);
        return await response.value();
    }

}
